<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int GOALRANGE = 1000;
const int NOAGENTS = 3;
const int NOMILESTONES = 5;
const int NOTASKS = 3;
const int NODEVICES = 5;
const int NOEVENTS = 1;

typedef int[0,GOALRANGE] goalrange_t;
typedef int[-1,NOAGENTS-1] agentid_t;  // agent id range
typedef int[-1,NOMILESTONES-1] milestoneid_t; // milestone id range
typedef int[-2,NOTASKS-1] taskid_t; // task id range
typedef int[-1,NODEVICES-1] deviceid_t;
typedef int[-1,NOEVENTS-1] eventid_t;
typedef int[0,86400] time_t; // time is in seconds (24 hours is the maximum)
typedef int[0,10] size_t;

const time_t TOTALTIME = 3600; // total time of the game: 1 hour

typedef int[0,3] taskstatus_t;  // task status
const taskstatus_t UNSTARTED = 0; // not started yet
const taskstatus_t STARTED = 1; // started
const taskstatus_t FINISHED  = 2; // finished
const taskstatus_t WAITING  = 3; // waiting for being started

typedef int[0,2] eventstatus_t;
const eventstatus_t SLEEP = 0;
const eventstatus_t ACTIVATED = 1;
const eventstatus_t OVERDUE = 2;

typedef struct {
    agentid_t p_agent;
    taskid_t p_task;
} precondition_t;

typedef struct {
    agentid_t c_agent;
    milestoneid_t c_position;
} collaboration_t;

typedef struct {
    deviceid_t d_id;
    milestoneid_t d_position;
} device_t;

typedef struct {
    taskid_t t_id;
    device_t t_deviceUse; // the device that is currently used by the task
    device_t t_deviceReq[NODEVICES]; // the requirement of devices of this task
} task_t;

typedef struct {   
    milestoneid_t a_position;
    task_t a_task;
    taskstatus_t a_status[NOTASKS];
    eventstatus_t a_monitors[NOEVENTS];
} agent_t;

const milestoneid_t ONTHEWAY = -1;
const milestoneid_t UNKOWNPOS = -1;
const deviceid_t NULLDEVICE = -1;
const device_t UNKOWNDEVICE = {NULLDEVICE, UNKOWNPOS};
const taskid_t ID_IDLE = -1;
const task_t TASK_IDLE = {ID_IDLE, UNKOWNDEVICE, {UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};
const taskid_t ID_MOVING = -2;
const task_t TASK_MOVING = {ID_MOVING, UNKOWNDEVICE, {UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};

broadcast chan exe[NOAGENTS], done[NOAGENTS];
broadcast chan go[NOAGENTS];
broadcast chan react[NOAGENTS][NOEVENTS];
clock timeConsumption; // the total time consumption

/**discrete variables in the templates*/
goalrange_t missionGoal = 1;
goalrange_t var = 0; // the variable that can be changed by tasks
agent_t agents[NOAGENTS]; // the agents
bool timeup = false;

/**judge if the mission goal is archieved*/
bool isGameWon()
{
    return var &gt;= missionGoal;
}

/**judge if a monitor of the agent is alert*/
bool isEventOccur(agentid_t agentID, eventid_t eventID) {
    return agents[agentID].a_monitors[eventID] == ACTIVATED;
}

bool isEventOverdue(agentid_t agentID, eventid_t eventID) {
    return agents[agentID].a_monitors[eventID] == OVERDUE;
}

bool isMonitorAlert(agentid_t agentID) {
    /*size_t i;

    for(i = 0; i &lt; NOEVENTS; i++) {
        if(isEventOccur(agentID, i)) {
            return true;
        }
    }*/

    return false;
}

bool isMonitorStop(agentid_t agentID) {
    size_t i;

    for(i = 0; i &lt; NOEVENTS; i++) {
        if(isEventOverdue(agentID, i)) {
            return true;
        }
    }

    return false;
}

/**functions for tasks*/
bool isExecutable(agentid_t agentID, task_t task) {
    bool ready = false;
    size_t i;

    if(timeup || isGameWon() || isMonitorStop(agentID)) {
        return false;
    }
    for(i = 0; i &lt; NODEVICES; i++) {
        if(task.t_deviceReq[i] != UNKOWNDEVICE) {
            // if the agent is at the position that contains a device belonging to the devide requirement of the task
            ready = ready || (agents[agentID].a_position == task.t_deviceReq[i].d_position);
        }
    }
    
    return ready;
}

device_t getDevice(agentid_t agentID, task_t task) {
    size_t i = 0;
    device_t deviceWouldUse = UNKOWNDEVICE;

    for(i = 0; i &lt; NODEVICES; i++) {
        if((task.t_deviceReq[i].d_position != UNKOWNPOS) &amp;&amp; 
           (task.t_deviceReq[i].d_position == agents[agentID].a_position)) {
            deviceWouldUse = task.t_deviceReq[i];
        }
    }

    return deviceWouldUse;
}

bool isBusy(agentid_t agentID, task_t task) {
    size_t i = 0;
    device_t deviceWouldUse = getDevice(agentID, task);

    if(deviceWouldUse.d_id == NULLDEVICE) { // if I do not require any device, then the target task is always not busy
        return false;
    }

    for(i = 0; i &lt; NOAGENTS; i++) {
        if(i!=agentID) {
            // if the agent is at the same position of another agent and their in-use device is the same
            if((agents[agentID].a_position == agents[i].a_position) &amp;&amp; 
               (deviceWouldUse == agents[i].a_task.t_deviceUse)) {
                if(agents[i].a_status[task.t_id] == STARTED) {
                    return true;
                }
            }
        }
    }

    return false;
}

void start(agentid_t agentID, task_t task) {
    size_t i = 0;

    agents[agentID].a_task = task;
    agents[agentID].a_status[task.t_id] = STARTED;
    agents[agentID].a_task.t_deviceUse = getDevice(agentID, task);
}

void finish(agentid_t agentID, task_t task, const bool last) {
    size_t i = 0;

    agents[agentID].a_task = TASK_IDLE;
    agents[agentID].a_status[task.t_id] = FINISHED;
    if(last) {
        for(i = 0; i &lt; NOTASKS; i++) {
            agents[agentID].a_status[i] = UNSTARTED;
        }
    }
}

void wait(agentid_t agentID, task_t task) {
    agents[agentID].a_task = task;
    agents[agentID].a_status[task.t_id] = WAITING;
}
</declaration>
	<template>
		<name x="5" y="5">Movement</name>
		<parameter>const agentid_t agentID, const milestoneid_t p1, const milestoneid_t p2, const time_t cost, const task_t taskOnP1, const task_t taskOnP2</parameter>
		<declaration>clock xm;

bool isReady(int position) {
    if(timeup || isGameWon() || isMonitorStop(agentID)) {
        return false;
    }
    if(agents[agentID].a_position == position &amp;&amp; agents[agentID].a_task == TASK_IDLE) {
        if(agents[agentID].a_status[taskOnP1.t_id] == FINISHED ||
           agents[agentID].a_status[taskOnP2.t_id] == UNSTARTED) { 
            return true;
        }
    }

    return false;
}

void move() {
    xm = 0;
    agents[agentID].a_task = TASK_MOVING;
    agents[agentID].a_position = ONTHEWAY;
}

void reach(int target) {
    xm = 0;
    agents[agentID].a_task = TASK_IDLE;
    agents[agentID].a_position = target;
}</declaration>
		<location id="id0" x="136" y="-34">
			<name x="144" y="-68">P2</name>
		</location>
		<location id="id1" x="-102" y="-34">
			<name x="-119" y="-68">F1T2</name>
			<label kind="invariant" x="-136" y="-17">xm&lt;=cost</label>
		</location>
		<location id="id2" x="-340" y="-34">
			<name x="-365" y="-68">P1</name>
			<label kind="exponentialrate" x="-350" y="0">100</label>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-17" y="34">go[agentID]?</label>
			<nail x="136" y="59"/>
			<nail x="-340" y="59"/>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-25" y="-93">xm&gt;=cost</label>
			<label kind="synchronisation" x="-25" y="-76">go[agentID]!</label>
			<label kind="assignment" x="-25" y="-59">reach(p2)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-314" y="-85">isReady(p1)</label>
			<label kind="assignment" x="-314" y="-59">move()</label>
		</transition>
	</template>
	<template>
		<name>TaskNoCondition</name>
		<parameter>const agentid_t agentID, const time_t BCET, const time_t WCET, const task_t task, const bool last</parameter>
		<declaration>clock xe;</declaration>
		<location id="id3" x="0" y="34">
			<name x="-17" y="51">Waiting</name>
			<label kind="exponentialrate" x="-10" y="68">100</label>
		</location>
		<location id="id4" x="-374" y="34">
			<name x="-391" y="51">Idle</name>
			<label kind="exponentialrate" x="-384" y="68">100</label>
		</location>
		<location id="id5" x="0" y="-204">
			<name x="17" y="-212">Executing</name>
			<label kind="invariant" x="9" y="-187">xe&lt;=WCET</label>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-357" y="-314">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-357" y="-229">xe=0,start(agentID,task)</label>
			<nail x="-374" y="-204"/>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-297" y="-110">xe&gt;=BCET</label>
			<label kind="assignment" x="-297" y="-85">xe=0,finish(agentID,task,last)</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="8" y="-136">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED</label>
			<label kind="assignment" x="8" y="-51">xe=0,start(agentID,task)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-348" y="42">isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-348" y="127">xe=0,wait(agentID,task)</label>
		</transition>
	</template>
	<template>
		<name>TaskWithCondition</name>
		<parameter>const agentid_t agentID, const time_t BCET, const time_t WCET, const task_t task, const precondition_t precondition, const bool last</parameter>
		<declaration>clock xe;</declaration>
		<location id="id6" x="0" y="34">
			<name x="-17" y="51">Waiting</name>
			<label kind="exponentialrate" x="-10" y="68">100</label>
		</location>
		<location id="id7" x="-374" y="34">
			<name x="-391" y="51">Idle</name>
			<label kind="exponentialrate" x="-384" y="68">100</label>
		</location>
		<location id="id8" x="0" y="-204">
			<name x="17" y="-212">Executing</name>
			<label kind="invariant" x="9" y="-187">xe&lt;=WCET</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-357" y="-331">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] != FINISHED &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-357" y="-229">xe=0,start(agentID,task)</label>
			<nail x="-374" y="-204"/>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-297" y="-110">xe&gt;=BCET</label>
			<label kind="assignment" x="-297" y="-85">xe=0,finish(agentID,task,last)</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="8" y="-136">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] != FINISHED &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED</label>
			<label kind="assignment" x="8" y="-34">xe=0,start(agentID,task)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-348" y="42">isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] != FINISHED &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-348" y="144">xe=0,wait(agentID,task)</label>
		</transition>
	</template>
	<template>
		<name>TaskWithConditions</name>
		<parameter>const agentid_t agentID, const time_t BCET, const time_t WCET, const task_t task, const precondition_t preconditions[2], const goalrange_t speed, const bool last</parameter>
		<declaration>clock xe;</declaration>
		<location id="id9" x="0" y="34">
			<name x="-17" y="51">Waiting</name>
			<label kind="exponentialrate" x="-10" y="68">100</label>
		</location>
		<location id="id10" x="-374" y="34">
			<name x="-391" y="51">Idle</name>
			<label kind="exponentialrate" x="-384" y="68">100</label>
		</location>
		<location id="id11" x="0" y="-204">
			<name x="17" y="-212">Executing</name>
			<label kind="invariant" x="9" y="-187">xe&lt;=WCET</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-357" y="-357">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
(agents[preconditions[0].p_agent].a_status[preconditions[0].p_task] == FINISHED ||
agents[preconditions[1].p_agent].a_status[preconditions[1].p_task] == FINISHED)&amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-357" y="-229">xe=0,start(agentID,task)</label>
			<nail x="-374" y="-204"/>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-297" y="-110">xe&gt;=BCET</label>
			<label kind="assignment" x="-297" y="-85">xe=0,finish(agentID,task,last),
var+=speed</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="8" y="-153">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
(agents[preconditions[0].p_agent].a_status[preconditions[0].p_task] == FINISHED ||
agents[preconditions[1].p_agent].a_status[preconditions[1].p_task] == FINISHED)&amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED</label>
			<label kind="assignment" x="8" y="-25">xe=0,start(agentID,task)</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-357" y="42">isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
(agents[preconditions[0].p_agent].a_status[preconditions[0].p_task] == FINISHED ||
agents[preconditions[1].p_agent].a_status[preconditions[1].p_task] == FINISHED)&amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-357" y="170">xe=0,wait(agentID,task)</label>
		</transition>
	</template>
	<template>
		<name>TaskEvent</name>
		<parameter>const agentid_t agentID, const eventid_t event, const time_t BCET, const time_t WCET, const task_t task</parameter>
		<declaration>clock xe;</declaration>
		<location id="id12" x="0" y="34">
			<name x="-17" y="51">Waiting</name>
			<label kind="exponentialrate" x="-10" y="68">100</label>
		</location>
		<location id="id13" x="-374" y="34">
			<name x="-391" y="51">Idle</name>
			<label kind="exponentialrate" x="-384" y="68">100</label>
		</location>
		<location id="id14" x="0" y="-204">
			<name x="17" y="-212">Executing</name>
			<label kind="invariant" x="9" y="-187">xe&lt;=WCET</label>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-357" y="-297">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
isEventOccur(agentID, event)</label>
			<label kind="assignment" x="-357" y="-229">xe=0,start(agentID,task)</label>
			<nail x="-374" y="-204"/>
		</transition>
		<transition controllable="false">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-297" y="-136">xe&gt;=BCET</label>
			<label kind="synchronisation" x="-297" y="-110">react[agentID][event]!</label>
			<label kind="assignment" x="-297" y="-85">xe=0,
agents[agentID].a_task = TASK_IDLE</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="8" y="-127">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
isEventOccur(agentID, event)</label>
			<label kind="assignment" x="8" y="-59">xe=0,start(agentID,task)</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-348" y="42">isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
isEventOccur(agentID, event)</label>
			<label kind="assignment" x="-348" y="110">xe=0,wait(agentID,task)</label>
		</transition>
	</template>
	<template>
		<name>Monitor</name>
		<parameter>agentid_t agentID, const eventid_t event, time_t warning, time_t shutdown</parameter>
		<declaration>clock xo;</declaration>
		<location id="id15" x="238" y="-34">
			<name x="212" y="-68">Stop</name>
		</location>
		<location id="id16" x="34" y="-34">
			<name x="-17" y="-59">Alert</name>
			<label kind="invariant" x="-76" y="-25">xo&lt;=shutdown</label>
		</location>
		<location id="id17" x="-238" y="-34">
			<name x="-229" y="-59">Run</name>
			<label kind="invariant" x="-229" y="-25">xo&lt;=warning</label>
		</location>
		<init ref="id17"/>
		<transition controllable="false">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="76" y="-25">xo&gt;=shutdown</label>
			<label kind="assignment" x="51" y="-8">agents[agentID].a_monitors[event]=OVERDUE</label>
		</transition>
		<transition controllable="false">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-221" y="8">react[agentID][event]?</label>
			<label kind="assignment" x="-221" y="25">xo=0,
agents[agentID].a_monitors[event]=SLEEP</label>
			<nail x="34" y="68"/>
			<nail x="-238" y="68"/>
		</transition>
		<transition controllable="false">
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-221" y="-119">xo&gt;=warning</label>
			<label kind="assignment" x="-221" y="-93">agents[agentID].a_monitors[event]=ACTIVATED</label>
			<nail x="-238" y="-68"/>
			<nail x="34" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Referee</name>
		<parameter>const agent_t initialData[NOAGENTS], const goalrange_t goal</parameter>
		<declaration>clock xr;

void initialize() {
    size_t i = 0, j = 0;

    missionGoal = goal;
    for(i = 0; i &lt; NOAGENTS; i++) {
        agents[i].a_position = initialData[i].a_position;
        agents[i].a_task = initialData[i].a_task;
        for(j = 0; j &lt; NOTASKS; j++) {
            agents[i].a_status[j] = initialData[i].a_status[j];
        }
    }
}</declaration>
		<location id="id18" x="-170" y="-136" color="#ff00ff">
			<name x="-180" y="-170">Lose</name>
		</location>
		<location id="id19" x="-170" y="0" color="#00ffff">
			<name x="-161" y="-34">Win</name>
		</location>
		<location id="id20" x="-340" y="-68" color="#00ff00">
			<name x="-365" y="-119">Ongoing</name>
			<label kind="invariant" x="-467" y="-102">xr&lt;=TOTALTIME</label>
			<label kind="exponentialrate" x="-348" y="-51">100</label>
		</location>
		<location id="id21" x="-544" y="-68">
			<name x="-578" y="-119">Begin</name>
			<committed/>
		</location>
		<init ref="id21"/>
		<transition controllable="false">
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="guard" x="-323" y="-153">xr&gt;=TOTALTIME</label>
			<label kind="assignment" x="-323" y="-136">timeup = true</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-289" y="-51">isGameWon()</label>
		</transition>
		<transition controllable="false">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="assignment" x="-476" y="-51">initialize()</label>
		</transition>
	</template>
	<template>
		<name>Collaboration_I</name>
		<parameter>const agentid_t agentID, const time_t BCET, const time_t WCET, const task_t task, const precondition_t precondition, const collaboration_t collaborations[2], const bool last</parameter>
		<declaration>clock xe;
agentid_t helper = -1;</declaration>
		<location id="id22" x="136" y="51">
			<name x="119" y="68">Waiting</name>
			<label kind="exponentialrate" x="126" y="85">100</label>
		</location>
		<location id="id23" x="-374" y="51">
			<name x="-391" y="68">Idle</name>
			<label kind="exponentialrate" x="-384" y="102">100</label>
		</location>
		<location id="id24" x="136" y="-204">
			<name x="153" y="-212">Executing</name>
			<label kind="invariant" x="145" y="-187">xe&lt;=WCET</label>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="select" x="-357" y="-425">h:int[0,1]</label>
			<label kind="guard" x="-357" y="-399">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] == FINISHED &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
(agents[collaborations[h].c_agent].a_position == collaborations[h].c_position &amp;&amp;
agents[collaborations[h].c_agent].a_position == agents[agentID].a_position) &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="synchronisation" x="-357" y="-255">exe[collaborations[h].c_agent]!</label>
			<label kind="assignment" x="-357" y="-229">xe=0,helper=collaborations[h].c_agent,start(agentID,task)</label>
			<nail x="-374" y="-204"/>
		</transition>
		<transition controllable="false">
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-297" y="-127">xe&gt;=BCET</label>
			<label kind="synchronisation" x="-297" y="-102">done[helper]!</label>
			<label kind="assignment" x="-297" y="-76">xe=0,finish(agentID,task,last)</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="guard" x="144" y="-161">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] == FINISHED &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
(agents[collaborations[helper].c_agent].a_position == collaborations[helper].c_position &amp;&amp;
agents[collaborations[helper].c_agent].a_position == agents[agentID].a_position)</label>
			<label kind="synchronisation" x="144" y="-17">exe[helper]!</label>
			<label kind="assignment" x="144" y="9">xe=0,start(agentID,task)</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="select" x="-331" y="59">h:int[0,1]</label>
			<label kind="guard" x="-331" y="85">isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] == FINISHED &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
(agents[collaborations[h].c_agent].a_position == collaborations[h].c_position &amp;&amp;
agents[collaborations[h].c_agent].a_position == agents[agentID].a_position) &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-331" y="229">xe=0,helper=collaborations[h].c_agent,wait(agentID,task)</label>
		</transition>
	</template>
	<template>
		<name>Collaboration_H</name>
		<parameter>const agentid_t agentID, const task_t task, const precondition_t precondition, const collaboration_t collaborations[1], const bool last</parameter>
		<declaration>clock xe;
agentid_t initiator = -1;</declaration>
		<location id="id25" x="204" y="34">
			<name x="187" y="51">Waiting</name>
			<label kind="exponentialrate" x="194" y="68">100</label>
		</location>
		<location id="id26" x="-374" y="34">
			<name x="-391" y="51">Idle</name>
			<label kind="exponentialrate" x="-384" y="68">100</label>
		</location>
		<location id="id27" x="204" y="-204">
			<name x="221" y="-212">Executing</name>
		</location>
		<init ref="id26"/>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="select" x="-357" y="-425">h:int[0,0]</label>
			<label kind="guard" x="-357" y="-399">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] != FINISHED &amp;&amp;
(agents[collaborations[h].c_agent].a_position == collaborations[h].c_position &amp;&amp;
agents[collaborations[h].c_agent].a_position == agents[agentID].a_position) &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="synchronisation" x="-357" y="-255">exe[agentID]?</label>
			<label kind="assignment" x="-357" y="-229">xe=0,start(agentID,task)</label>
			<nail x="-374" y="-204"/>
		</transition>
		<transition controllable="false">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-297" y="-102">done[agentID]?</label>
			<label kind="assignment" x="-297" y="-85">xe=0,finish(agentID,task,last)</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id27"/>
			<label kind="guard" x="212" y="-170">!isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] != FINISHED &amp;&amp;
(agents[collaborations[initiator].c_agent].a_position == collaborations[initiator].c_position &amp;&amp;
agents[collaborations[initiator].c_agent].a_position == agents[agentID].a_position)</label>
			<label kind="synchronisation" x="212" y="-42">exe[agentID]?</label>
			<label kind="assignment" x="212" y="-17">xe=0,start(agentID,task)</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="select" x="-348" y="42">h:int[0,0]</label>
			<label kind="guard" x="-348" y="68">isBusy(agentID,task) &amp;&amp;
isExecutable(agentID,task) &amp;&amp;
agents[agentID].a_status[task.t_id] != FINISHED &amp;&amp;
agents[precondition.p_agent].a_status[precondition.p_task] != FINISHED &amp;&amp;
(agents[collaborations[h].c_agent].a_position == collaborations[h].c_position &amp;&amp;
agents[collaborations[h].c_agent].a_position == agents[agentID].a_position) &amp;&amp;
!isMonitorAlert(agentID)</label>
			<label kind="assignment" x="-348" y="221">xe=0,initiator=h,wait(agentID,task)</label>
		</transition>
	</template>
	<system>/**ID of agents*/
const agentid_t ID_WHEELLOADER0 = 0;
const agentid_t ID_TRUCK0 = 1;
const agentid_t ID_TRUCK1 = 2;

/**ID of devices*/
const deviceid_t ID_DV_PC0 = 0;
const deviceid_t ID_DV_SC0 = 1;
const deviceid_t ID_DV_CH0 = 2;
const deviceid_t ID_DV_CH1 = 3;

/**ID of milestones*/
const milestoneid_t ID_STONE0 = 0;
const milestoneid_t ID_PRIMARYCRUSHER0 = 1;
const milestoneid_t ID_SECONDARYCRUSHER0 = 2;
const milestoneid_t ID_CHARGER0 = 3;
const milestoneid_t ID_CHARGER1 = 4;

/**ID of tasks*/
const taskid_t ID_DIG_WHEELLOADER = 0;
const taskid_t ID_UNLOAD_TO_TRUCKS_WHEELLOADER = 1;
const taskid_t ID_LOAD_FROM_WHEELLOADERS_TRUCK = 0; // loading from wl or loading from primary crusher
const taskid_t ID_LOAD_FROM_PRIMARY_TRUCK = 0; // truck only needs to choose one of them to execute, so the tasks' ID are the same
const taskid_t ID_UNLOAD_TO_SECONDARY_TRUCK = 1;
const taskid_t ID_TASK_CHARGE = 2; // charge task for wl and tk
/**ID of events*/
const eventid_t ID_EVENT_BATTERY_LOW = 0;
/**devices*/
const device_t DV_STONE0_NULL = {NULLDEVICE, ID_STONE0};
const device_t DV_PC0 = {ID_DV_PC0, ID_PRIMARYCRUSHER0};
const device_t DV_SC0 = {ID_DV_SC0, ID_SECONDARYCRUSHER0};
const device_t DV_CH0 = {ID_DV_CH0, ID_CHARGER0};
const device_t DV_CH1 = {ID_DV_CH1, ID_CHARGER1};

/**tasks and their milestones*/
const task_t TASK_DIG = {ID_DIG_WHEELLOADER, UNKOWNDEVICE, {DV_STONE0_NULL, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};
const task_t TASK_UNLOAD_TO_TRUCKS = {ID_UNLOAD_TO_TRUCKS_WHEELLOADER, UNKOWNDEVICE, {DV_STONE0_NULL, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};
const task_t TASK_LOAD_FROM_WHEELLOADERS = {ID_LOAD_FROM_WHEELLOADERS_TRUCK, UNKOWNDEVICE, {DV_STONE0_NULL, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};
const task_t TASK_LOAD_FROM_PRIMARY = {ID_LOAD_FROM_PRIMARY_TRUCK, UNKOWNDEVICE, {DV_PC0, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};
const task_t TASK_UNLOAD_TO_SECONDARY = {ID_UNLOAD_TO_SECONDARY_TRUCK, UNKOWNDEVICE, {DV_SC0, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};
const task_t TASK_CHARGE = {ID_TASK_CHARGE, UNKOWNDEVICE, {DV_CH0, DV_CH1, UNKOWNDEVICE, UNKOWNDEVICE, UNKOWNDEVICE}};

/**preconditions of tasks*/
const precondition_t PRE_UNLOAD_TO_TRUCK_WL0 = {ID_WHEELLOADER0, ID_DIG_WHEELLOADER};
const precondition_t PRE_LOAD_FROM_WHEELLOADER_TRUCK0 = {ID_TRUCK0, ID_LOAD_FROM_PRIMARY_TRUCK};
const precondition_t PRE_LOAD_FROM_PRIMARY_TRUCK0 = {ID_TRUCK0, ID_LOAD_FROM_WHEELLOADERS_TRUCK};
const precondition_t PRE_UNLOAD_TO_SECONDARY_TRUCK0[2] = {{ID_TRUCK0, ID_LOAD_FROM_WHEELLOADERS_TRUCK}, {ID_TRUCK0, ID_LOAD_FROM_PRIMARY_TRUCK}};
const precondition_t PRE_LOAD_FROM_WHEELLOADER_TRUCK1 = {ID_TRUCK1, ID_LOAD_FROM_PRIMARY_TRUCK};
const precondition_t PRE_LOAD_FROM_PRIMARY_TRUCK1 = {ID_TRUCK1, ID_LOAD_FROM_WHEELLOADERS_TRUCK};
const precondition_t PRE_UNLOAD_TO_SECONDARY_TRUCK1[2] = {{ID_TRUCK1, ID_LOAD_FROM_WHEELLOADERS_TRUCK}, {ID_TRUCK1, ID_LOAD_FROM_PRIMARY_TRUCK}};

/**collaboration between agents*/
const collaboration_t COL_UNLOAD_TO_TRUCKS_WL0[2] = {{ID_TRUCK0, ID_STONE0}, {ID_TRUCK1, ID_STONE0}};
const collaboration_t COL_LOAD_FROM_WHEELLOADERS[1] = {{ID_WHEELLOADER0, ID_STONE0}};

/**parameters of the mission*/
const goalrange_t GOAL = 100;
const goalrange_t ITERATIONS = 2;

/**initial information of agents*/
const agent_t INIT_WHEELLOADER0 = {ID_STONE0, TASK_IDLE, {UNSTARTED, UNSTARTED, UNSTARTED}, {SLEEP}};
const agent_t INIT_TRUCK0 = {ID_STONE0, TASK_IDLE, {UNSTARTED, UNSTARTED, UNSTARTED}, {SLEEP}};
const agent_t INIT_TRUCK1 = {ID_PRIMARYCRUSHER0, TASK_IDLE, {UNSTARTED, UNSTARTED, UNSTARTED}, {SLEEP}};
const agent_t INIT_AGENTS[NOAGENTS] = {INIT_WHEELLOADER0,INIT_TRUCK0,INIT_TRUCK1};

/** Agents */
Rong = Referee(INIT_AGENTS, GOAL);
/** Movement */
//wheel loder 0
m_stone0Charger0_WL0 = Movement(ID_WHEELLOADER0, ID_STONE0, ID_CHARGER0, 60, TASK_UNLOAD_TO_TRUCKS, TASK_CHARGE);
m_charger0Stone0_WL0 = Movement(ID_WHEELLOADER0, ID_CHARGER0, ID_STONE0, 60, TASK_CHARGE, TASK_UNLOAD_TO_TRUCKS);
m_stone0Charger1_WL0 = Movement(ID_WHEELLOADER0, ID_STONE0, ID_CHARGER1, 60, TASK_UNLOAD_TO_TRUCKS, TASK_CHARGE);
m_charger1Stone0_WL0 = Movement(ID_WHEELLOADER0, ID_CHARGER1, ID_STONE0, 60, TASK_CHARGE, TASK_UNLOAD_TO_TRUCKS);
//truck 0
m_stone0Secondary0_TK0 = Movement(ID_TRUCK0, ID_STONE0, ID_SECONDARYCRUSHER0, 120, TASK_LOAD_FROM_WHEELLOADERS, TASK_UNLOAD_TO_SECONDARY);
m_secondary0Stone0_TK0 = Movement(ID_TRUCK0, ID_SECONDARYCRUSHER0, ID_STONE0, 120, TASK_UNLOAD_TO_SECONDARY, TASK_LOAD_FROM_WHEELLOADERS);
m_stone0Charger0_TK0 = Movement(ID_TRUCK0, ID_STONE0, ID_CHARGER0, 120, TASK_LOAD_FROM_WHEELLOADERS, TASK_CHARGE);
m_charger0Stone0_TK0 = Movement(ID_TRUCK0, ID_CHARGER0, ID_STONE0, 120, TASK_CHARGE, TASK_LOAD_FROM_WHEELLOADERS);
m_stone0Charger1_TK0 = Movement(ID_TRUCK0, ID_STONE0, ID_CHARGER1, 120, TASK_LOAD_FROM_WHEELLOADERS, TASK_CHARGE);
m_charger1Stone0_TK0 = Movement(ID_TRUCK0, ID_CHARGER1, ID_STONE0, 120, TASK_CHARGE, TASK_LOAD_FROM_WHEELLOADERS);
m_primary0Secondary0_TK0 = Movement(ID_TRUCK0, ID_PRIMARYCRUSHER0, ID_SECONDARYCRUSHER0, 120, TASK_LOAD_FROM_PRIMARY, TASK_UNLOAD_TO_SECONDARY);
m_secondary0Primary0_TK0 = Movement(ID_TRUCK0, ID_SECONDARYCRUSHER0, ID_PRIMARYCRUSHER0, 120, TASK_UNLOAD_TO_SECONDARY, TASK_LOAD_FROM_PRIMARY);
m_primary0Charger0_TK0 = Movement(ID_TRUCK0, ID_PRIMARYCRUSHER0, ID_CHARGER0, 120,TASK_LOAD_FROM_PRIMARY, TASK_CHARGE);
m_charger0Primary0_TK0 = Movement(ID_TRUCK0, ID_CHARGER0, ID_PRIMARYCRUSHER0, 120, TASK_CHARGE, TASK_LOAD_FROM_PRIMARY);
m_primary0Charger1_TK0 = Movement(ID_TRUCK0, ID_PRIMARYCRUSHER0, ID_CHARGER1, 120,TASK_LOAD_FROM_PRIMARY, TASK_CHARGE);
m_charger1Primary0_TK0 = Movement(ID_TRUCK0, ID_CHARGER1, ID_PRIMARYCRUSHER0, 120, TASK_CHARGE, TASK_LOAD_FROM_PRIMARY);
m_secondary0Charger0_TK0 = Movement(ID_TRUCK0, ID_SECONDARYCRUSHER0, ID_CHARGER0, 120,TASK_UNLOAD_TO_SECONDARY, TASK_CHARGE);
m_charger0Secondary0_TK0 = Movement(ID_TRUCK0, ID_CHARGER0, ID_SECONDARYCRUSHER0, 120, TASK_CHARGE,TASK_UNLOAD_TO_SECONDARY);
m_secondary0Charger1_TK0 = Movement(ID_TRUCK0, ID_SECONDARYCRUSHER0, ID_CHARGER1, 120,TASK_UNLOAD_TO_SECONDARY, TASK_CHARGE);
m_charger1Secondary0_TK0 = Movement(ID_TRUCK0, ID_CHARGER1, ID_SECONDARYCRUSHER0, 120, TASK_CHARGE,TASK_UNLOAD_TO_SECONDARY);
//truck 1
m_stone0Secondary0_TK1 = Movement(ID_TRUCK1, ID_STONE0, ID_SECONDARYCRUSHER0, 120, TASK_LOAD_FROM_WHEELLOADERS, TASK_UNLOAD_TO_SECONDARY);
m_secondary0Stone0_TK1 = Movement(ID_TRUCK1, ID_SECONDARYCRUSHER0, ID_STONE0, 120, TASK_UNLOAD_TO_SECONDARY, TASK_LOAD_FROM_WHEELLOADERS);
m_stone0Charger0_TK1 = Movement(ID_TRUCK1, ID_STONE0, ID_CHARGER0, 120, TASK_LOAD_FROM_WHEELLOADERS, TASK_CHARGE);
m_charger0Stone0_TK1 = Movement(ID_TRUCK1, ID_CHARGER0, ID_STONE0, 120, TASK_CHARGE, TASK_LOAD_FROM_WHEELLOADERS);
m_stone0Charger1_TK1 = Movement(ID_TRUCK1, ID_STONE0, ID_CHARGER1, 120, TASK_LOAD_FROM_WHEELLOADERS, TASK_CHARGE);
m_charger1Stone0_TK1 = Movement(ID_TRUCK1, ID_CHARGER1, ID_STONE0, 120, TASK_CHARGE, TASK_LOAD_FROM_WHEELLOADERS);
m_primary0Secondary0_TK1 = Movement(ID_TRUCK1, ID_PRIMARYCRUSHER0, ID_SECONDARYCRUSHER0, 120, TASK_LOAD_FROM_PRIMARY, TASK_UNLOAD_TO_SECONDARY);
m_secondary0Primary0_TK1 = Movement(ID_TRUCK1, ID_SECONDARYCRUSHER0, ID_PRIMARYCRUSHER0, 120, TASK_UNLOAD_TO_SECONDARY, TASK_LOAD_FROM_PRIMARY);
m_primary0Charger0_TK1 = Movement(ID_TRUCK1, ID_PRIMARYCRUSHER0, ID_CHARGER0, 120,TASK_LOAD_FROM_PRIMARY, TASK_CHARGE);
m_charger0Primary0_TK1 = Movement(ID_TRUCK1, ID_CHARGER0, ID_PRIMARYCRUSHER0, 120, TASK_CHARGE, TASK_LOAD_FROM_PRIMARY);
m_primary0Charger1_TK1 = Movement(ID_TRUCK1, ID_PRIMARYCRUSHER0, ID_CHARGER1, 120,TASK_LOAD_FROM_PRIMARY, TASK_CHARGE);
m_charger1Primary0_TK1 = Movement(ID_TRUCK1, ID_CHARGER1, ID_PRIMARYCRUSHER0, 120, TASK_CHARGE, TASK_LOAD_FROM_PRIMARY);
m_secondary0Charger0_TK1 = Movement(ID_TRUCK1, ID_SECONDARYCRUSHER0, ID_CHARGER0, 120,TASK_UNLOAD_TO_SECONDARY, TASK_CHARGE);
m_charger0Secondary0_TK1 = Movement(ID_TRUCK1, ID_CHARGER0, ID_SECONDARYCRUSHER0, 120, TASK_CHARGE,TASK_UNLOAD_TO_SECONDARY);
m_secondary0Charger1_TK1 = Movement(ID_TRUCK1, ID_SECONDARYCRUSHER0, ID_CHARGER1, 120,TASK_UNLOAD_TO_SECONDARY, TASK_CHARGE);
m_charger1Secondary0_TK1 = Movement(ID_TRUCK1, ID_CHARGER1, ID_SECONDARYCRUSHER0, 120, TASK_CHARGE,TASK_UNLOAD_TO_SECONDARY);
/** Tasks */
//wheel loder 0
t_digging_WL0 = TaskNoCondition(ID_WHEELLOADER0, 60, 60, TASK_DIG, false);
t_unloading_WL0 = Collaboration_I(ID_WHEELLOADER0, 60, 60, TASK_UNLOAD_TO_TRUCKS, PRE_UNLOAD_TO_TRUCK_WL0, COL_UNLOAD_TO_TRUCKS_WL0, true);
t_charging_WL0 = TaskEvent(ID_WHEELLOADER0, ID_EVENT_BATTERY_LOW, 60, 60, TASK_CHARGE);
//truck 0
t_loadingFromWL_TK0 = Collaboration_H(ID_TRUCK0, TASK_LOAD_FROM_WHEELLOADERS, PRE_LOAD_FROM_WHEELLOADER_TRUCK0, COL_LOAD_FROM_WHEELLOADERS, false);
t_loadingFromPrimary_TK0 = TaskWithCondition(ID_TRUCK0, 90, 90, TASK_LOAD_FROM_PRIMARY, PRE_LOAD_FROM_PRIMARY_TRUCK0, false);
t_unloadingToSecond_TK0 = TaskWithConditions(ID_TRUCK0, 90, 90, TASK_UNLOAD_TO_SECONDARY, PRE_UNLOAD_TO_SECONDARY_TRUCK0, GOAL/ITERATIONS, true);
t_charging_TK0 = TaskEvent(ID_TRUCK0, ID_EVENT_BATTERY_LOW, 90, 90, TASK_CHARGE);
//truck 1
t_loadingFromWL_TK1 = Collaboration_H(ID_TRUCK1, TASK_LOAD_FROM_WHEELLOADERS, PRE_LOAD_FROM_WHEELLOADER_TRUCK1, COL_LOAD_FROM_WHEELLOADERS, false);
t_loadingFromPrimary_TK1 = TaskWithCondition(ID_TRUCK1, 90, 90, TASK_LOAD_FROM_PRIMARY, PRE_LOAD_FROM_PRIMARY_TRUCK1, false);
t_unloadingToSecond_TK1 = TaskWithConditions(ID_TRUCK1, 90, 90, TASK_UNLOAD_TO_SECONDARY, PRE_UNLOAD_TO_SECONDARY_TRUCK1, GOAL/ITERATIONS, true);
t_charging_TK1 = TaskEvent(ID_TRUCK1, ID_EVENT_BATTERY_LOW, 90, 90, TASK_CHARGE);
o_battery_WL0 = Monitor(ID_WHEELLOADER0, ID_EVENT_BATTERY_LOW, 309, 510);
o_battery_TK0 = Monitor(ID_TRUCK0, ID_EVENT_BATTERY_LOW, 460, 671);
o_battery_TK1 = Monitor(ID_TRUCK1, ID_EVENT_BATTERY_LOW, 460, 671);

system Rong,
/**map*/
m_stone0Charger0_WL0,m_charger0Stone0_WL0,m_stone0Charger1_WL0,m_charger1Stone0_WL0,
m_stone0Secondary0_TK0,m_secondary0Stone0_TK0,
m_stone0Charger0_TK0,m_charger0Stone0_TK0,m_stone0Charger1_TK0,m_charger1Stone0_TK0,
m_primary0Secondary0_TK0,m_secondary0Primary0_TK0,
m_primary0Charger0_TK0,m_charger0Primary0_TK0,m_primary0Charger1_TK0,m_charger1Primary0_TK0,
m_secondary0Charger0_TK0,m_charger0Secondary0_TK0,m_secondary0Charger1_TK0,m_charger1Secondary0_TK0,
m_stone0Secondary0_TK1,m_secondary0Stone0_TK1,
m_stone0Charger0_TK1,m_charger0Stone0_TK1,m_stone0Charger1_TK1,m_charger1Stone0_TK1,
m_primary0Secondary0_TK1,m_secondary0Primary0_TK1,
m_primary0Charger0_TK1,m_charger0Primary0_TK1,m_primary0Charger1_TK1,m_charger1Primary0_TK1,
m_secondary0Charger0_TK1,m_charger0Secondary0_TK1,m_secondary0Charger1_TK1,m_charger1Secondary0_TK1,
/**tasks*/
t_digging_WL0,t_unloading_WL0,t_charging_WL0,
t_loadingFromWL_TK0,t_loadingFromPrimary_TK0,t_unloadingToSecond_TK0,t_charging_TK0,t_loadingFromWL_TK1,t_loadingFromPrimary_TK1,t_unloadingToSecond_TK1,t_charging_TK1,
o_battery_WL0,o_battery_TK0,o_battery_TK1;

</system>
	<queries>
		<query>
			<formula>strategy policy = maxE(var * 50 - timeConsumption)[&lt;=TOTALTIME]{
Rong.location,
m_stone0Charger0_WL0.location, m_charger0Stone0_WL0.location, m_stone0Charger1_WL0.location, m_charger1Stone0_WL0.location, 
m_stone0Secondary0_TK0.location, m_secondary0Stone0_TK0.location, 
m_stone0Charger0_TK0.location, m_charger0Stone0_TK0.location, m_stone0Charger1_TK0.location, m_charger1Stone0_TK0.location, 
m_primary0Secondary0_TK0.location, m_secondary0Primary0_TK0.location, 
m_primary0Charger0_TK0.location, m_charger0Primary0_TK0.location, m_primary0Charger1_TK0.location, m_charger1Primary0_TK0.location, 
m_secondary0Charger0_TK0.location,m_charger0Secondary0_TK0.location,m_secondary0Charger1_TK0.location,m_charger1Secondary0_TK0.location,
m_stone0Secondary0_TK1.location, m_secondary0Stone0_TK1.location, 
m_stone0Charger0_TK1.location, m_charger0Stone0_TK1.location, m_stone0Charger1_TK1.location, m_charger1Stone0_TK1.location, 
m_primary0Secondary0_TK1.location, m_secondary0Primary0_TK1.location, 
m_primary0Charger0_TK1.location, m_charger0Primary0_TK1.location, m_primary0Charger1_TK1.location, m_charger1Primary0_TK1.location, 
m_secondary0Charger0_TK1.location,m_charger0Secondary0_TK1.location,m_secondary0Charger1_TK1.location,m_charger1Secondary0_TK1.location,
t_digging_WL0.location, t_unloading_WL0.location, t_charging_WL0.location, 
t_loadingFromWL_TK0.location, t_loadingFromPrimary_TK0.location, t_unloadingToSecond_TK0.location, t_charging_TK0.location,
t_loadingFromWL_TK1.location, t_loadingFromPrimary_TK1.location, t_unloadingToSecond_TK1.location, t_charging_TK1.location,
o_battery_WL0.location, o_battery_TK0.location, o_battery_TK1.location, 
var,
agents[0].a_position, agents[0].a_monitors[0], agents[0].a_task.t_id, agents[0].a_task.t_deviceUse.d_id, agents[0].a_task.t_deviceUse.d_position, agents[0].a_status[ID_DIG_WHEELLOADER], agents[0].a_status[ID_UNLOAD_TO_TRUCKS_WHEELLOADER],
agents[1].a_position, agents[1].a_monitors[0], agents[1].a_task.t_id, agents[1].a_task.t_deviceUse.d_id, agents[1].a_task.t_deviceUse.d_position, agents[1].a_status[ID_DIG_WHEELLOADER], agents[1].a_status[ID_UNLOAD_TO_TRUCKS_WHEELLOADER],
agents[2].a_position, agents[2].a_monitors[0], agents[2].a_task.t_id, agents[2].a_task.t_deviceUse.d_id, agents[2].a_task.t_deviceUse.d_position, agents[2].a_status[ID_DIG_WHEELLOADER], agents[2].a_status[ID_UNLOAD_TO_TRUCKS_WHEELLOADER]
}-&gt;{}:&lt;&gt; Rong.Win || Rong.Lose
</formula>
			<comment>for learning</comment>
		</query>
		<query>
			<formula>saveStrategy("./strategies/demo/complete_policyD6.out", policy)</formula>
			<comment>for saving the strategy</comment>
		</query>
		<query>
			<formula>A&lt;&gt; isGameWon() under policy</formula>
			<comment>for verification and compact</comment>
		</query>
		<query>
			<formula></formula>
			<comment>for test
E&lt;&gt; isGameWon() under policy</comment>
		</query>
		<query>
			<formula>saveStrategy("./strategies/demo/compact_policyD6.out", policy)</formula>
			<comment>for compacting the strategy</comment>
		</query>
		<query>
			<formula>A&lt;&gt; isGameWon() under policy</formula>
			<comment>for verifying the compact strategy</comment>
		</query>
	</queries>
</nta>
